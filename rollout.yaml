apiVersion: apps/v1
kind: Deployment
metadata:
  name: jarvis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jarvis
  template:
    metadata:
      labels:
        app: jarvis
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: jarvis
        image: jarvisdevacr.azurecr.io/jarvis:1.0.0
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        volumeMounts:
        - name: secrets-store01-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true
        env:
        - name: PORT
          value: "80"
        - name: GIN_MODE
          value: "release"
        - name: TELEGRAM_BOT_TOKEN
          valueFrom:
            secretKeyRef:
              name: env-secrets
              key: TelegramBotToken
        - name: VALID_TELEGRAM_SENDERS
          valueFrom:
            secretKeyRef:
              name: env-secrets
              key: ValidTelegramSenders
        - name: VALID_TELEGRAM_GROUPS
          valueFrom:
            secretKeyRef:
              name: env-secrets
              key: ValidTelegramGroups
        - name: TRUSTED_ACTORS
          valueFrom:
            secretKeyRef:
              name: env-secrets
              key: TrustedActors
        - name: AUGUST_API_KEY
          valueFrom:
            secretKeyRef:
              name: env-secrets
              key: AugustApiKey
        - name: AUGUST_INSTALLID
          valueFrom:
            secretKeyRef:
              name: env-secrets
              key: AugustInstallId
        - name: AUGUST_PASSWORD
          valueFrom:
            secretKeyRef:
              name: env-secrets
              key: AugustPassword
        - name: AUGUST_ID_TYPE
          valueFrom:
            secretKeyRef:
              name: env-secrets
              key: AugustIdType
        - name: AUGUST_ID
          valueFrom:
            secretKeyRef:
              name: env-secrets
              key: AugustId
        - name: AUGUST_LOCK_ID
          valueFrom:
            secretKeyRef:
              name: env-secrets
              key: AugustLockId
      volumes:
        - name: secrets-store01-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "azure-jarviskv-secrets"
---
apiVersion: v1
kind: Service
metadata:
  name: jarvis
spec:
  type: ClusterIP
  ports:
  - port: 80
  selector:
    app: jarvis
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-jarviskv-secrets
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"                                   # Set to true for using managed identity
    userAssignedIdentityID: dc34b44c-5ea3-40d3-8820-69945bc5ccde   # Set the clientID of the user-assigned managed identity to use
    keyvaultName: jarviskv                                         # Set to the name of your key vault
    objects:  |
      array:
        - |
          objectName: TelegramBotToken
          objectType: secret
        - |
          objectName: ValidTelegramSenders
          objectType: secret
        - |
          objectName: ValidTelegramGroups
          objectType: secret
        - |
          objectName: TrustedActors
          objectType: secret
        - |
          objectName: AugustApiKey
          objectType: secret
        - |
          objectName: AugustInstallId
          objectType: secret
        - |
          objectName: AugustPassword
          objectType: secret
        - |
          objectName: AugustIdType
          objectType: secret
        - |
          objectName: AugustId
          objectType: secret
        - |
          objectName: AugustLockId
          objectType: secret
    tenantId: 0ad1a6ca-bf0b-4eea-b39d-a0a369403977   # The tenant ID of the key vault
  secretObjects:
  - data:
    - key: TelegramBotToken                           # data field to populate
      objectName: TelegramBotToken                    # name of the mounted content to sync; this could be the object name or the object alias
    - key: ValidTelegramSenders
      objectName: ValidTelegramSenders
    - key: ValidTelegramGroups
      objectName: ValidTelegramGroups
    - key: TrustedActors
      objectName: TrustedActors
    - key: AugustApiKey
      objectName: AugustApiKey
    - key: AugustInstallId
      objectName: AugustInstallId
    - key: AugustPassword
      objectName: AugustPassword
    - key: AugustIdType
      objectName: AugustIdType
    - key: AugustId
      objectName: AugustId
    - key: AugustLockId
      objectName: AugustLockId
    secretName: env-secrets
    type: Opaque
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: jarvis@spicer.dev
    privateKeySecretRef:
      name: letsencrypt
    solvers:
    - http01:
        ingress:
          class: nginx
          podTemplate:
            spec:
              nodeSelector:
                "kubernetes.io/os": linux
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jarvis-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/limit-rpm: "5"
    nginx.ingress.kubernetes.io/limit-rps: "2"
    nginx.ingress.kubernetes.io/limit-burst-multiplier: "1"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - jarvis.spicer.dev
    secretName: tls-secret-spicerdev
  rules:
  - host: jarvis.spicer.dev
    http:
      paths:
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: jarvis
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: willow-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/limit-rpm: "5"
    nginx.ingress.kubernetes.io/limit-rps: "2"
    nginx.ingress.kubernetes.io/limit-burst-multiplier: "1"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - willow.party
    secretName: tls-secret-willowparty
  rules:
  - host: willow.party
    http:
      paths:
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: jarvis
            port:
              number: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minecraft-server
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  replicas: 1
  selector:
    matchLabels:
      app: minecraft
  template:
    metadata:
      labels:
        app: minecraft
    spec:
      volumes:
        - name: world
          persistentVolumeClaim:
            claimName: minecraft-world
      containers:
        - name: minecraft
          image: itzg/minecraft-server
          imagePullPolicy: Always
          env:
            - name: EULA
              value: "TRUE"
          volumeMounts:
            - name: world
              mountPath: /data
          ports:
            - name: game-port
              containerPort: 25565
              hostPort: 25565
          resources:
            requests:
              cpu: 50m
              memory: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minecraft-world
  labels:
    app: minecraft
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: minecraft
spec:
  type: ClusterIP
  ports:
  - port: 25565
    targetPort: 25565
  selector:
    app: minecraft
---
# This ConfigMap is added as a '--tcp-services-configmap' to the 'nginx-ingress-ingress-nginx-controller'
# https://stackoverflow.com/questions/66367867/how-to-expose-port-22-via-nginx-ingress-controller
# eg: --tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-nginx-tcp
  namespace: default  
data:
  "25565": default/minecraft:25565